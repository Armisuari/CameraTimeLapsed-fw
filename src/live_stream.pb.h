/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_OPEN_GOPRO_LIVE_STREAM_PB_H_INCLUDED
#define PB_OPEN_GOPRO_LIVE_STREAM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _open_gopro_EnumLens
{
    open_gopro_EnumLens_LENS_WIDE = 0,
    open_gopro_EnumLens_LENS_LINEAR = 4,
    open_gopro_EnumLens_LENS_SUPERVIEW = 3
} open_gopro_EnumLens;

typedef enum _open_gopro_EnumLiveStreamError
{
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_NONE = 0,                   /* No error (success) */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_NETWORK = 1,                /* General network error during the stream */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_CREATESTREAM = 2,           /* Startup error: bad URL or valid with live stream server */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_OUTOFMEMORY = 3,            /* Not enough memory on camera to complete task */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_INPUTSTREAM = 4,            /* Failed to get stream from low level camera system */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_INTERNET = 5,               /* No internet access detected on startup of streamer */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_OSNETWORK = 6,              /* Error occured in linux networking stack. Usually means the server closed the connection */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_SELECTEDNETWORKTIMEOUT = 7, /* Timed out attemping to connect to the wifi network when attemping live stream */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_SSL_HANDSHAKE = 8,          /* SSL handshake failed (commonly caused due to incorrect time / time zone) */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_CAMERA_BLOCKED = 9,         /* Low level camera system rejected attempt to start live stream */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_UNKNOWN = 10,               /* Unknown */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_SD_CARD_FULL = 40,          /* Can not perform livestream because sd card is full */
    open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_SD_CARD_REMOVED = 41        /* Livestream stopped because sd card was removed */
} open_gopro_EnumLiveStreamError;

typedef enum _open_gopro_EnumLiveStreamStatus
{
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_IDLE = 0,             /* Initial status. Livestream has not yet been configured */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_CONFIG = 1,           /* Livestream is being configured */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_READY = 2,            /* Livestream has finished configuration and is ready to start streaming */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_STREAMING = 3,        /* Livestream is actively streaming */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_COMPLETE_STAY_ON = 4, /* Live stream is exiting. No errors occured. */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_FAILED_STAY_ON = 5,   /* Live stream is exiting. An error occurred. */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_RECONNECTING = 6,     /* An error occurred during livestream and stream is attempting to reconnect. */
    open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_UNAVAILABLE = 7       /* Live stream setup is unavailable due to camera lens configuration */
} open_gopro_EnumLiveStreamStatus;

typedef enum _open_gopro_EnumRegisterLiveStreamStatus
{
    open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_STATUS = 1,
    open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_ERROR = 2,
    open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_MODE = 3,
    open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_BITRATE = 4
} open_gopro_EnumRegisterLiveStreamStatus;

typedef enum _open_gopro_EnumWindowSize
{
    open_gopro_EnumWindowSize_WINDOW_SIZE_480 = 4,
    open_gopro_EnumWindowSize_WINDOW_SIZE_720 = 7,
    open_gopro_EnumWindowSize_WINDOW_SIZE_1080 = 12
} open_gopro_EnumWindowSize;

/* Struct definitions */
/* *
 Live Stream status

 Sent either:

   - As a synchronous response to initial @ref RequestGetLiveStreamStatus
   - As an asynchronous notifications registered for via @ref RequestGetLiveStreamStatus */
typedef struct _open_gopro_NotifyLiveStreamStatus
{
    bool has_live_stream_status;
    open_gopro_EnumLiveStreamStatus live_stream_status; /* Live stream status */
    bool has_live_stream_error;
    open_gopro_EnumLiveStreamError live_stream_error; /* Live stream error */
    bool has_live_stream_encode;
    bool live_stream_encode; /* Is live stream encoding? */
    bool has_live_stream_bitrate;
    int32_t live_stream_bitrate;                           /* Live stream bitrate (Kbps) */
    pb_callback_t live_stream_window_size_supported_array; /* Set of currently supported resolutions */
    bool has_live_stream_encode_supported;
    bool live_stream_encode_supported; /* Does the camera support encoding while live streaming? */
    bool has_live_stream_max_lens_unsupported;
    bool live_stream_max_lens_unsupported; /* Is the Max Lens feature NOT supported? */
    bool has_live_stream_minimum_stream_bitrate;
    int32_t live_stream_minimum_stream_bitrate; /* Camera-defined minimum bitrate (static) (Kbps) */
    bool has_live_stream_maximum_stream_bitrate;
    int32_t live_stream_maximum_stream_bitrate; /* Camera-defined maximum bitrate (static) (Kbps) */
    bool has_live_stream_lens_supported;
    bool live_stream_lens_supported;                /* Does camera support setting lens for live streaming? */
    pb_callback_t live_stream_lens_supported_array; /* Set of currently supported FOV options */
} open_gopro_NotifyLiveStreamStatus;

/* *
 Get the current livestream status (and optionally register for future status changes)

 Response: @ref NotifyLiveStreamStatus

 Notification: @ref NotifyLiveStreamStatus */
typedef struct _open_gopro_RequestGetLiveStreamStatus
{
    pb_callback_t register_live_stream_status;   /* Array of live stream statuses to be notified about */
    pb_callback_t unregister_live_stream_status; /* Array of live stream statuses to stop being notified about */
} open_gopro_RequestGetLiveStreamStatus;

/* *
 Configure Live Streaming

 Response: @ref ResponseGeneric */
typedef struct _open_gopro_RequestSetLiveStreamMode
{
    bool has_url;
    char url[64]; /* RTMP(S) URL used for live stream */
    bool has_encode;
    bool encode; /* Save media to sdcard while streaming? */
    /* *
 Resolution to use for live stream

 The set of supported resolutions is only available from the `live_stream_window_size_supported_array` in @ref NotifyLiveStreamStatus) */
    bool has_window_size;
    open_gopro_EnumWindowSize window_size;
    pb_callback_t cert; /* Certificate for servers that require it in PEM format */
    bool has_minimum_bitrate;
    int32_t minimum_bitrate; /* Minimum desired bitrate (may or may not be honored) */
    bool has_maximum_bitrate;
    int32_t maximum_bitrate; /* Maximum desired bitrate (may or may not be honored) */
    bool has_starting_bitrate;
    int32_t starting_bitrate; /* Starting bitrate */
    /* *
 Lens to use for live stream

 The set of supported lenses is only available from the  `live_stream_lens_supported_array` in @ref NotifyLiveStreamStatus) */
    bool has_lens;
    open_gopro_EnumLens lens;
} open_gopro_RequestSetLiveStreamMode;

#ifdef __cplusplus
extern "C"
{
#endif

/* Helper constants for enums */
#define _open_gopro_EnumLens_MIN open_gopro_EnumLens_LENS_WIDE
#define _open_gopro_EnumLens_MAX open_gopro_EnumLens_LENS_LINEAR
#define _open_gopro_EnumLens_ARRAYSIZE ((open_gopro_EnumLens)(open_gopro_EnumLens_LENS_LINEAR + 1))

#define _open_gopro_EnumLiveStreamError_MIN open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_NONE
#define _open_gopro_EnumLiveStreamError_MAX open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_SD_CARD_REMOVED
#define _open_gopro_EnumLiveStreamError_ARRAYSIZE ((open_gopro_EnumLiveStreamError)(open_gopro_EnumLiveStreamError_LIVE_STREAM_ERROR_SD_CARD_REMOVED + 1))

#define _open_gopro_EnumLiveStreamStatus_MIN open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_IDLE
#define _open_gopro_EnumLiveStreamStatus_MAX open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_UNAVAILABLE
#define _open_gopro_EnumLiveStreamStatus_ARRAYSIZE ((open_gopro_EnumLiveStreamStatus)(open_gopro_EnumLiveStreamStatus_LIVE_STREAM_STATE_UNAVAILABLE + 1))

#define _open_gopro_EnumRegisterLiveStreamStatus_MIN open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_STATUS
#define _open_gopro_EnumRegisterLiveStreamStatus_MAX open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_BITRATE
#define _open_gopro_EnumRegisterLiveStreamStatus_ARRAYSIZE ((open_gopro_EnumRegisterLiveStreamStatus)(open_gopro_EnumRegisterLiveStreamStatus_REGISTER_LIVE_STREAM_STATUS_BITRATE + 1))

#define _open_gopro_EnumWindowSize_MIN open_gopro_EnumWindowSize_WINDOW_SIZE_480
#define _open_gopro_EnumWindowSize_MAX open_gopro_EnumWindowSize_WINDOW_SIZE_1080
#define _open_gopro_EnumWindowSize_ARRAYSIZE ((open_gopro_EnumWindowSize)(open_gopro_EnumWindowSize_WINDOW_SIZE_1080 + 1))

#define open_gopro_NotifyLiveStreamStatus_live_stream_status_ENUMTYPE open_gopro_EnumLiveStreamStatus
#define open_gopro_NotifyLiveStreamStatus_live_stream_error_ENUMTYPE open_gopro_EnumLiveStreamError
#define open_gopro_NotifyLiveStreamStatus_live_stream_window_size_supported_array_ENUMTYPE open_gopro_EnumWindowSize
#define open_gopro_NotifyLiveStreamStatus_live_stream_lens_supported_array_ENUMTYPE open_gopro_EnumLens

#define open_gopro_RequestGetLiveStreamStatus_register_live_stream_status_ENUMTYPE open_gopro_EnumRegisterLiveStreamStatus
#define open_gopro_RequestGetLiveStreamStatus_unregister_live_stream_status_ENUMTYPE open_gopro_EnumRegisterLiveStreamStatus

#define open_gopro_RequestSetLiveStreamMode_window_size_ENUMTYPE open_gopro_EnumWindowSize
#define open_gopro_RequestSetLiveStreamMode_lens_ENUMTYPE open_gopro_EnumLens

/* Initializer values for message structs */
#define open_gopro_NotifyLiveStreamStatus_init_default                                                                                                                                 \
    {                                                                                                                                                                                  \
        false, _open_gopro_EnumLiveStreamStatus_MIN, false, _open_gopro_EnumLiveStreamError_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, \
        {                                                                                                                                                                              \
            {NULL}, NULL                                                                                                                                                               \
        }                                                                                                                                                                              \
    }
#define open_gopro_RequestGetLiveStreamStatus_init_default \
    {                                                      \
        {{NULL}, NULL},                                    \
        {                                                  \
            {NULL}, NULL                                   \
        }                                                  \
    }
#define open_gopro_RequestSetLiveStreamMode_init_default                                                                                          \
    {                                                                                                                                             \
        false, "", false, 0, false, _open_gopro_EnumWindowSize_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, _open_gopro_EnumLens_MIN \
    }
#define open_gopro_NotifyLiveStreamStatus_init_zero                                                                                                                                    \
    {                                                                                                                                                                                  \
        false, _open_gopro_EnumLiveStreamStatus_MIN, false, _open_gopro_EnumLiveStreamError_MIN, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, false, 0, \
        {                                                                                                                                                                              \
            {NULL}, NULL                                                                                                                                                               \
        }                                                                                                                                                                              \
    }
#define open_gopro_RequestGetLiveStreamStatus_init_zero \
    {                                                   \
        {{NULL}, NULL},                                 \
        {                                               \
            {NULL}, NULL                                \
        }                                               \
    }
#define open_gopro_RequestSetLiveStreamMode_init_zero                                                                                             \
    {                                                                                                                                             \
        false, "", false, 0, false, _open_gopro_EnumWindowSize_MIN, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, _open_gopro_EnumLens_MIN \
    }

/* Field tags (for use in manual encoding/decoding) */
#define open_gopro_NotifyLiveStreamStatus_live_stream_status_tag 1
#define open_gopro_NotifyLiveStreamStatus_live_stream_error_tag 2
#define open_gopro_NotifyLiveStreamStatus_live_stream_encode_tag 3
#define open_gopro_NotifyLiveStreamStatus_live_stream_bitrate_tag 4
#define open_gopro_NotifyLiveStreamStatus_live_stream_window_size_supported_array_tag 5
#define open_gopro_NotifyLiveStreamStatus_live_stream_encode_supported_tag 6
#define open_gopro_NotifyLiveStreamStatus_live_stream_max_lens_unsupported_tag 7
#define open_gopro_NotifyLiveStreamStatus_live_stream_minimum_stream_bitrate_tag 8
#define open_gopro_NotifyLiveStreamStatus_live_stream_maximum_stream_bitrate_tag 9
#define open_gopro_NotifyLiveStreamStatus_live_stream_lens_supported_tag 10
#define open_gopro_NotifyLiveStreamStatus_live_stream_lens_supported_array_tag 11
#define open_gopro_RequestGetLiveStreamStatus_register_live_stream_status_tag 1
#define open_gopro_RequestGetLiveStreamStatus_unregister_live_stream_status_tag 2
#define open_gopro_RequestSetLiveStreamMode_url_tag 1
#define open_gopro_RequestSetLiveStreamMode_encode_tag 2
#define open_gopro_RequestSetLiveStreamMode_window_size_tag 3
#define open_gopro_RequestSetLiveStreamMode_cert_tag 6
#define open_gopro_RequestSetLiveStreamMode_minimum_bitrate_tag 7
#define open_gopro_RequestSetLiveStreamMode_maximum_bitrate_tag 8
#define open_gopro_RequestSetLiveStreamMode_starting_bitrate_tag 9
#define open_gopro_RequestSetLiveStreamMode_lens_tag 10

/* Struct field encoding specification for nanopb */
#define open_gopro_NotifyLiveStreamStatus_FIELDLIST(X, a)                       \
    X(a, STATIC, OPTIONAL, UENUM, live_stream_status, 1)                        \
    X(a, STATIC, OPTIONAL, UENUM, live_stream_error, 2)                         \
    X(a, STATIC, OPTIONAL, BOOL, live_stream_encode, 3)                         \
    X(a, STATIC, OPTIONAL, INT32, live_stream_bitrate, 4)                       \
    X(a, CALLBACK, REPEATED, UENUM, live_stream_window_size_supported_array, 5) \
    X(a, STATIC, OPTIONAL, BOOL, live_stream_encode_supported, 6)               \
    X(a, STATIC, OPTIONAL, BOOL, live_stream_max_lens_unsupported, 7)           \
    X(a, STATIC, OPTIONAL, INT32, live_stream_minimum_stream_bitrate, 8)        \
    X(a, STATIC, OPTIONAL, INT32, live_stream_maximum_stream_bitrate, 9)        \
    X(a, STATIC, OPTIONAL, BOOL, live_stream_lens_supported, 10)                \
    X(a, CALLBACK, REPEATED, UENUM, live_stream_lens_supported_array, 11)
#define open_gopro_NotifyLiveStreamStatus_CALLBACK pb_default_field_callback
#define open_gopro_NotifyLiveStreamStatus_DEFAULT NULL

#define open_gopro_RequestGetLiveStreamStatus_FIELDLIST(X, a)       \
    X(a, CALLBACK, REPEATED, UENUM, register_live_stream_status, 1) \
    X(a, CALLBACK, REPEATED, UENUM, unregister_live_stream_status, 2)
#define open_gopro_RequestGetLiveStreamStatus_CALLBACK pb_default_field_callback
#define open_gopro_RequestGetLiveStreamStatus_DEFAULT NULL

#define open_gopro_RequestSetLiveStreamMode_FIELDLIST(X, a) \
    X(a, STATIC, OPTIONAL, STRING, url, 1)                  \
    X(a, STATIC, OPTIONAL, BOOL, encode, 2)                 \
    X(a, STATIC, OPTIONAL, UENUM, window_size, 3)           \
    X(a, CALLBACK, OPTIONAL, BYTES, cert, 6)                \
    X(a, STATIC, OPTIONAL, INT32, minimum_bitrate, 7)       \
    X(a, STATIC, OPTIONAL, INT32, maximum_bitrate, 8)       \
    X(a, STATIC, OPTIONAL, INT32, starting_bitrate, 9)      \
    X(a, STATIC, OPTIONAL, UENUM, lens, 10)
#define open_gopro_RequestSetLiveStreamMode_CALLBACK pb_default_field_callback
#define open_gopro_RequestSetLiveStreamMode_DEFAULT (const pb_byte_t *)"\x18\x04\x00"

    extern const pb_msgdesc_t open_gopro_NotifyLiveStreamStatus_msg;
    extern const pb_msgdesc_t open_gopro_RequestGetLiveStreamStatus_msg;
    extern const pb_msgdesc_t open_gopro_RequestSetLiveStreamMode_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define open_gopro_NotifyLiveStreamStatus_fields &open_gopro_NotifyLiveStreamStatus_msg
#define open_gopro_RequestGetLiveStreamStatus_fields &open_gopro_RequestGetLiveStreamStatus_msg
#define open_gopro_RequestSetLiveStreamMode_fields &open_gopro_RequestSetLiveStreamMode_msg

    /* Maximum encoded size of messages (where known) */
    /* open_gopro_NotifyLiveStreamStatus_size depends on runtime parameters */
    /* open_gopro_RequestGetLiveStreamStatus_size depends on runtime parameters */
    /* open_gopro_RequestSetLiveStreamMode_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
